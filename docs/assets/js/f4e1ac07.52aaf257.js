"use strict";(self.webpackChunk_buidlerlabs_hedera_strato_docs=self.webpackChunk_buidlerlabs_hedera_strato_docs||[]).push([[154],{9818:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>s,metadata:()=>d,toc:()=>u});var a=n(7462),i=n(3366),o=(n(7294),n(3905)),c=(n(1839),["components"]),s={id:"account",title:"Account"},r=void 0,d={unversionedId:"markdown/guides/entities/account",id:"markdown/guides/entities/account",title:"Account",description:"Creating an account",source:"@site/src.docs/markdown/guides/entities/account.md",sourceDirName:"markdown/guides/entities",slug:"/markdown/guides/entities/account",permalink:"/markdown/guides/entities/account",draft:!1,editUrl:"https://github.com/buidler-labs/hedera-strato-docs/edit/main/src.docs/markdown/guides/entities/account.md",tags:[],version:"current",lastUpdatedBy:"Victor ADASCALITEI",lastUpdatedAt:1665499930,formattedLastUpdatedAt:"Oct 11, 2022",frontMatter:{id:"account",title:"Account"},sidebar:"docs",previous:{title:"The Session",permalink:"/markdown/guides/session"},next:{title:"Contract",permalink:"/markdown/guides/entities/contract"}},l={},u=[{value:"Creating an account",id:"creating-an-account",level:2},{value:"Using it",id:"using-it",level:3},{value:"Deleting",id:"deleting",level:4},{value:"Updating",id:"updating",level:4}],p={toc:u};function m(e){var t=e.components,n=(0,i.Z)(e,c);return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"creating-an-account"},"Creating an account"),(0,o.kt)("p",null,"If you want to create such entities, it's as simple as"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:"live=true containerKey=creating_an_account",live:"true",containerKey:"creating_an_account"},"const { session } = await ApiSession.default();\nconst liveAccount = await session.create(new Account());\n\nlog(liveAccount.id);\n")),(0,o.kt)("p",null,"If you want more control over the resulting account, you can give it some constructor args such as:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export type AccountFeatures = {\n  keyType?: KeyType;\n  key?: Key;\n  receiverSignatureRequired?: boolean;\n  proxyAccountId?: AccountId;\n  autoRenewPeriod?: number | Long.Long | Duration;\n  accountMemo?: string;\n  maxAutomaticTokenAssociations?: number | Long.Long;\n};\n")),(0,o.kt)("p",null,"Be default, if you don't specify it a ",(0,o.kt)("inlineCode",{parentName:"p"},"key")," / ",(0,o.kt)("inlineCode",{parentName:"p"},"keyType"),", it defaults to generating a private ",(0,o.kt)("inlineCode",{parentName:"p"},"ED25519")," PrivateKey. Here is how you would create an ",(0,o.kt)("inlineCode",{parentName:"p"},"ECDSA")," one:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:"live=true containerKey=key_or_keyType",live:"true",containerKey:"key_or_keyType"},"const { session } = await ApiSession.default();\nconst liveAccount = await session.create(\n  new Account({ keyType: KeyType.ECDSA })\n);\n\nlog(liveAccount.id);\n")),(0,o.kt)("h3",{id:"using-it"},"Using it"),(0,o.kt)("p",null,"Upon success, the returned ",(0,o.kt)("inlineCode",{parentName:"p"},"liveAccount")," will be an instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"LiveAccountWithPrivateKey")," which is a special type of ",(0,o.kt)("inlineCode",{parentName:"p"},"LiveAccount")," that also allows for manual transaction signing via the ",(0,o.kt)("inlineCode",{parentName:"p"},"tryToSign"),". This is helpful, for instance, in multi-sign scenarios."),(0,o.kt)("p",null,"Since it's a ",(0,o.kt)("inlineCode",{parentName:"p"},"LiveEntity")," type (which implements the ",(0,o.kt)("inlineCode",{parentName:"p"},"SolidityAddressable")," interface) , it can also be passed as arguments to ",(0,o.kt)("inlineCode",{parentName:"p"},"LiveContract")," methods where ",(0,o.kt)("inlineCode",{parentName:"p"},"address"),"es are required. In this case, it will resolve to using the ",(0,o.kt)("inlineCode",{parentName:"p"},"liveAccount.id.toSolidityAddress()"),"."),(0,o.kt)("h4",{id:"deleting"},"Deleting"),(0,o.kt)("p",null,"Of course, this also means that you can delete it via the ",(0,o.kt)("inlineCode",{parentName:"p"},"LiveAccount.deleteEntity({ transferAccountId?: AccountId })"),". When deleting, you are given the option of providing a ",(0,o.kt)("inlineCode",{parentName:"p"},"transferAccountId")," recipient of the remaining account hbar value. If none provided, the operation will default using the ",(0,o.kt)("inlineCode",{parentName:"p"},"ApiSession"),"'s wallet account id."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Once deleted, certain operations such as ",(0,o.kt)("inlineCode",{parentName:"p"},"getBalanceOfLiveEntity")," and, in general, all network-related actions, are no longer available.")),(0,o.kt)("h4",{id:"updating"},"Updating"),(0,o.kt)("p",null,"On the other hand, if you want to ",(0,o.kt)("a",{parentName:"p",href:"https://docs.hedera.com/guides/docs/sdks/cryptocurrency/update-an-account"},"update elements of your account"),", you can do a ",(0,o.kt)("inlineCode",{parentName:"p"},"LiveEntity.updateEntity(AccountFeatures)"),". The updated properties follows the same object schema definition as when creating an ",(0,o.kt)("inlineCode",{parentName:"p"},"Account"),", namely, the ",(0,o.kt)("inlineCode",{parentName:"p"},"AccountFeatures")," type defined above."))}m.isMDXComponent=!0}}]);